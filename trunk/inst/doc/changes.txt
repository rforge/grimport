Changes from version 0.6 to 0.6-5
===============================

1.  Minor fix to how 'FUN' argument gets passed down by grobify().

2.  PostScriptTrace() now records eofill slightly differently from
    fill.  This is captured in a 'rule' slot in PictureFill objects
    by readPicture().

3.  readPicture() attempts to handle non-printing characters
    in imported text (by replacing them with full stops).  
    The 'tidy' argument allows the user to turn off this 
    conversion if desired.

4.  Fix to cope with zero-height text in imported image
    (problem reported by Toby Dylan Hocking)

5.  RGML <path> elements ("stroke", "fill", and "char")
    are now converted into "pathgrob" grobs by grobify(),
    which means that it is now possible to correctly 
    reproduce more complex images, particularly, paths
    with holes using grid.picture().

    Similar change allows similar functionality with picture().

    Old behaviour retained (for grid.picture()) via
    oldGrobify() function.

6.  Improved PostScriptTrace() to at least have a prayer
    at handling non-standard color spaces (like R's sRGB !!!)
     
7.  The vignettes have been updated for the new complex-path
    support.


Changes from version 0.5 to 0.6
===============================

1.  Added checks for XML special characters (e.g, '&')
    in text values (and improved encoding support).

2.  Added support for /widthshow and /awidthshow operators 
    (and improved /ashow support).

3.  Added support for line types (lty/setdash) 
    (and improved recording of line width).

4.  Added support for rotated text
    (and improved calculation of text width).

5.  Added 'charpos' argument to PostScriptTrace() to allow
    text that is NOT stroked to still be drawn as individual
    characters (with each character having its own location).

6.  Added 'sizeByWidth' argument to grobify (method for 
    PictureText objects) so that text size can be calculated
    from traced width OR from font height (the latter
    is based on querying the font so that two pieces of text 
    using the same font at the same scale will have the 
    same height upon tracing).

7.  Text paths are now ALWAYS a single path.  If 
    charpath=TRUE, then the text will also have child
    paths (which are the individual letters stroked).
    Alternatively, if charpos=TRUE, then the text will
    have child paths that are the individual letters
    as further text elements.

8.  Added "[[" method for Picture objects (to allow 
    access to paths within a PictureText path that
    has PictureChars or PictureTexts as children;
    subsetting by "[" does not access children of 
    a PictureText path).

9.  The 'bgText' argument for grobify(PictureChar) can now
    be a named vector so that, e.g., "o" can be "white" (to 
    fill the centre), while "i" can be "black" (to fill the
    dot).  The default value for 'bgText' has sensible settings. 

10. PostScriptTrace() now also records font name information for
    text.  This information is not currently used in drawing,
    but at least the information is now recorded in the 
    RGML format.

11. Bumped RGML file version to "3".

12. Added vignette to describe the variety of ways that you
    can import text from an external image.


Changes from version 0.4-5 to 0.5
=================================

1.  Added picture() function for drawing Picture as part
    of a plot produced by the 'graphics' package.


Changes from version 0.4-4 to 0.4-5
===================================

1.  Added 'encoding' argument to PostScriptTrace().


Changes from version 0.4 to 0.4-4
=================================

1.  Added support for /ashow operator.


Changes from version 0.3-1 to 0.4
=================================

1.  Fixed bug in how the width and height of text is calculated when
    PostScriptTrace(charpath=FALSE).

2.  Added 'setflat' argument to PostScriptTrace() to allow
    control of how many lines each curve is broken into.

3.  Allowed 'label' argument of picturePaths() to be a logical
    so can easily turn off labelling.

4.  Added a DTD for the RGML format (in inst/dtd/).

5.  Added a 'version' attribute to the <picture> element
    in the RGML format.  This allows 'grImport' to detect
    out-of-date RGML files and prompt for PostScriptTrace()
    to be re-run.


Changes from version 0.3 to 0.3-1
=================================

1.  Fixes to License: in DESCRIPTION and to imports in NAMESPACE


Changes from version 0.2-4 to 0.3
=================================

1.  Added 'distort' argument to grid.picture() so that image
    will not try to maintain its aspect ratio if distort=TRUE.

    Decided to bump minor version number cos this is not just 
    a bug fix.

    Motivated by feature request from Toby Dylan Hocking.


Changes from version 0.2-3 to 0.2-4
===================================

1.  Fix to PostScriptTrace() so that full file paths work on Windows.

    Thanks to Duncan Murdoch and Alex Hanke for bug reports.


Changes from version 0.2-2 to 0.2-3
===================================

1.  Fix to explodePaths() so that it handles paths that do not
    need exploding.


Changes from version 0.1 to 0.2
=================================

1.  Importing text was not working at all;  this now works, though
    imported text is just character outlines.  The default drawing
    method just strokes the character outline;  you can attempt
    to fill the characters, in which case, the first outline in each
    character is filled in the current colour, then all subsequent 
    outlines for the character are filled using a user-specified 
    background colour (default is "white").  This a very simple-
    minded approach, but it does work for some straightforward
    examples (an example where it doesn't work is the dot on a 
    lower-case "i").

    This change adds a new "char" type of path (to the existing
    "stroke" and "fill" types) and a new "PictureChar" class
    (to the existing "PictureStroke" and "PictureFill" classes).

2.  A path with zero locations used to cause an error;  such
    paths are now just not drawn.

3.  A new function explodePaths() breaks up any path with multiple
    'move' operations into separate paths.

4.  Added some tests in test/ dir.

[thanks to Ken Knoblauch for bug reports and testing 
 that led to these improvements]
